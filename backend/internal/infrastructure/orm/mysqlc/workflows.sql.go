// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: workflows.sql

package mysqlc

import (
	"context"
)

const createWorkflow = `-- name: CreateWorkflow :execlastid
INSERT INTO workflows (name) 
VALUES (?)
`

func (q *Queries) CreateWorkflow(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, createWorkflow, name)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getAllWorkflows = `-- name: GetAllWorkflows :many
SELECT id, name
FROM workflows
`

type GetAllWorkflowsRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetAllWorkflows(ctx context.Context) ([]GetAllWorkflowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllWorkflows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWorkflowsRow
	for rows.Next() {
		var i GetAllWorkflowsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
