// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_schedules.sql

package mysqlc

import (
	"context"
)

const createTimeSchedule = `-- name: CreateTimeSchedule :execlastid
INSERT INTO time_schedules (device_condition_id, start_time, end_time)
VALUES (?, ?, ?)
`

type CreateTimeScheduleParams struct {
	DeviceConditionID int32
	StartTime         string
	EndTime           string
}

func (q *Queries) CreateTimeSchedule(ctx context.Context, arg CreateTimeScheduleParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTimeSchedule, arg.DeviceConditionID, arg.StartTime, arg.EndTime)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getTimeScheduleFromID = `-- name: GetTimeScheduleFromID :one
SELECT id, device_condition_id, start_time, end_time
FROM time_schedules
WHERE id = ?
`

type GetTimeScheduleFromIDRow struct {
	ID                int32
	DeviceConditionID int32
	StartTime         string
	EndTime           string
}

func (q *Queries) GetTimeScheduleFromID(ctx context.Context, id int32) (GetTimeScheduleFromIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTimeScheduleFromID, id)
	var i GetTimeScheduleFromIDRow
	err := row.Scan(
		&i.ID,
		&i.DeviceConditionID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getTimeSchedulesFromDeviceCondition = `-- name: GetTimeSchedulesFromDeviceCondition :many
SELECT id, device_condition_id, start_time, end_time
FROM time_schedules
WHERE device_condition_id = ?
`

type GetTimeSchedulesFromDeviceConditionRow struct {
	ID                int32
	DeviceConditionID int32
	StartTime         string
	EndTime           string
}

func (q *Queries) GetTimeSchedulesFromDeviceCondition(ctx context.Context, deviceConditionID int32) ([]GetTimeSchedulesFromDeviceConditionRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimeSchedulesFromDeviceCondition, deviceConditionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTimeSchedulesFromDeviceConditionRow
	for rows.Next() {
		var i GetTimeSchedulesFromDeviceConditionRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceConditionID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
