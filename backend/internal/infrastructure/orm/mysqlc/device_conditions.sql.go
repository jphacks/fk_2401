// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device_conditions.sql

package mysqlc

import (
	"context"
	"database/sql"
)

const createDeviceCondition = `-- name: CreateDeviceCondition :execlastid
INSERT INTO device_conditions (device_id, operation_id, valid, set_point, duration, operator)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateDeviceConditionParams struct {
	DeviceID    int32
	OperationID int32
	Valid       bool
	SetPoint    sql.NullFloat64
	Duration    sql.NullInt32
	Operator    sql.NullInt32
}

func (q *Queries) CreateDeviceCondition(ctx context.Context, arg CreateDeviceConditionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createDeviceCondition,
		arg.DeviceID,
		arg.OperationID,
		arg.Valid,
		arg.SetPoint,
		arg.Duration,
		arg.Operator,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getDeviceConditionFromID = `-- name: GetDeviceConditionFromID :one
SELECT id, device_id, operation_id, valid, set_point, duration, operator
FROM device_conditions
WHERE id = ?
`

type GetDeviceConditionFromIDRow struct {
	ID          int32
	DeviceID    int32
	OperationID int32
	Valid       bool
	SetPoint    sql.NullFloat64
	Duration    sql.NullInt32
	Operator    sql.NullInt32
}

func (q *Queries) GetDeviceConditionFromID(ctx context.Context, id int32) (GetDeviceConditionFromIDRow, error) {
	row := q.db.QueryRowContext(ctx, getDeviceConditionFromID, id)
	var i GetDeviceConditionFromIDRow
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.OperationID,
		&i.Valid,
		&i.SetPoint,
		&i.Duration,
		&i.Operator,
	)
	return i, err
}

const getDeviceConditionsFromDeviceID = `-- name: GetDeviceConditionsFromDeviceID :many
SELECT id, device_id, operation_id, valid, set_point, duration, operator
FROM device_conditions
WHERE device_id = ?
`

type GetDeviceConditionsFromDeviceIDRow struct {
	ID          int32
	DeviceID    int32
	OperationID int32
	Valid       bool
	SetPoint    sql.NullFloat64
	Duration    sql.NullInt32
	Operator    sql.NullInt32
}

func (q *Queries) GetDeviceConditionsFromDeviceID(ctx context.Context, deviceID int32) ([]GetDeviceConditionsFromDeviceIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceConditionsFromDeviceID, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceConditionsFromDeviceIDRow
	for rows.Next() {
		var i GetDeviceConditionsFromDeviceIDRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.OperationID,
			&i.Valid,
			&i.SetPoint,
			&i.Duration,
			&i.Operator,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
