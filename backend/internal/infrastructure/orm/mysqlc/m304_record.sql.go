// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: m304_record.sql

package mysqlc

import (
	"context"
)

const createM304Record = `-- name: CreateM304Record :execlastid
INSERT INTO m304_record (m304_id, device_id, ` + "`" + `block` + "`" + `, valid, position)
VALUES (?, ?, ?, ?, ?)
`

type CreateM304RecordParams struct {
	M304ID   int32
	DeviceID int32
	Block    string
	Valid    bool
	Position int32
}

func (q *Queries) CreateM304Record(ctx context.Context, arg CreateM304RecordParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createM304Record,
		arg.M304ID,
		arg.DeviceID,
		arg.Block,
		arg.Valid,
		arg.Position,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getRecordFromM304ID = `-- name: GetRecordFromM304ID :many
SELECT id, m304_id, device_id, ` + "`" + `block` + "`" + `, valid, position
FROM m304_record
WHERE m304_id = ?
`

type GetRecordFromM304IDRow struct {
	ID       int32
	M304ID   int32
	DeviceID int32
	Block    string
	Valid    bool
	Position int32
}

func (q *Queries) GetRecordFromM304ID(ctx context.Context, m304ID int32) ([]GetRecordFromM304IDRow, error) {
	rows, err := q.db.QueryContext(ctx, getRecordFromM304ID, m304ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecordFromM304IDRow
	for rows.Next() {
		var i GetRecordFromM304IDRow
		if err := rows.Scan(
			&i.ID,
			&i.M304ID,
			&i.DeviceID,
			&i.Block,
			&i.Valid,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
