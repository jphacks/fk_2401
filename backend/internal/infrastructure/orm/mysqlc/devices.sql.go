// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package mysqlc

import (
	"context"
	"database/sql"
	"time"
)

const createDevice = `-- name: CreateDevice :execlastid
INSERT INTO devices (house_id, climate_data_id, uecs_device_id, device_name, valid, set_point, duration, operator) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateDeviceParams struct {
	HouseID       int32
	ClimateDataID int32
	UecsDeviceID  int32
	DeviceName    sql.NullString
	Valid         sql.NullBool
	SetPoint      sql.NullFloat64
	Duration      sql.NullInt32
	Operator      sql.NullInt32
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createDevice,
		arg.HouseID,
		arg.ClimateDataID,
		arg.UecsDeviceID,
		arg.DeviceName,
		arg.Valid,
		arg.SetPoint,
		arg.Duration,
		arg.Operator,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getDeviceFromID = `-- name: GetDeviceFromID :one
SELECT id, house_id, climate_data_id, uecs_device_id, device_name, valid, set_point, duration, operator
FROM devices
WHERE id = ?
`

type GetDeviceFromIDRow struct {
	ID            int32
	HouseID       int32
	ClimateDataID int32
	UecsDeviceID  int32
	DeviceName    sql.NullString
	Valid         sql.NullBool
	SetPoint      sql.NullFloat64
	Duration      sql.NullInt32
	Operator      sql.NullInt32
}

func (q *Queries) GetDeviceFromID(ctx context.Context, id int32) (GetDeviceFromIDRow, error) {
	row := q.db.QueryRowContext(ctx, getDeviceFromID, id)
	var i GetDeviceFromIDRow
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.ClimateDataID,
		&i.UecsDeviceID,
		&i.DeviceName,
		&i.Valid,
		&i.SetPoint,
		&i.Duration,
		&i.Operator,
	)
	return i, err
}

const getDevicesFromHouse = `-- name: GetDevicesFromHouse :many
SELECT 
    id, house_id, climate_data_id, uecs_device_id, device_name, valid, set_point, duration, operator, created_at, updated_at
FROM devices
WHERE house_id = ?
`

func (q *Queries) GetDevicesFromHouse(ctx context.Context, houseID int32) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevicesFromHouse, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.ClimateDataID,
			&i.UecsDeviceID,
			&i.DeviceName,
			&i.Valid,
			&i.SetPoint,
			&i.Duration,
			&i.Operator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJoinedDevicesFromHouse = `-- name: GetJoinedDevicesFromHouse :many
SELECT 
    d.id, d.house_id, d.uecs_device_id, d.device_name, d.valid, d.set_point, d.duration, d.operator, d.created_at, d.updated_at,
    c.name AS climate_data_name, c.unit
FROM devices d
JOIN climate_datas c ON d.climate_data_id = c.id
WHERE d.house_id = ?
`

type GetJoinedDevicesFromHouseRow struct {
	ID              int32
	HouseID         int32
	UecsDeviceID    int32
	DeviceName      sql.NullString
	Valid           sql.NullBool
	SetPoint        sql.NullFloat64
	Duration        sql.NullInt32
	Operator        sql.NullInt32
	CreatedAt       time.Time
	UpdatedAt       time.Time
	ClimateDataName string
	Unit            string
}

func (q *Queries) GetJoinedDevicesFromHouse(ctx context.Context, houseID int32) ([]GetJoinedDevicesFromHouseRow, error) {
	rows, err := q.db.QueryContext(ctx, getJoinedDevicesFromHouse, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetJoinedDevicesFromHouseRow
	for rows.Next() {
		var i GetJoinedDevicesFromHouseRow
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.UecsDeviceID,
			&i.DeviceName,
			&i.Valid,
			&i.SetPoint,
			&i.Duration,
			&i.Operator,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClimateDataName,
			&i.Unit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
